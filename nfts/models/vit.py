import math
import os
from functools import partial

import torch
import torch.nn as nn
import torch.nn.functional as F

from nfts.models.ett import Block_Ada
from nfts.models.protonet import ProtoNetHead
from nfts.models.supernet import ViTSuperNetSampler


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        raise ValueError(
            "mean is more than 2 std from [a, b] in nn.init.trunc_normal_. The distribution of values may be incorrect."
        )

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        ll = norm_cdf((a - mean) / std)
        uu = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * ll - 1, 2 * uu - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.0))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0.0, std=1.0, a=-2.0, b=2.0):
    # type: (torch.Tensor, float, float, float, float) -> torch.Tensor
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def drop_path(x, drop_prob: float = 0.0, training: bool = False):
    if drop_prob == 0.0 or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks)."""

    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.0):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class Attention(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0.0, proj_drop=0.0):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = qk_scale or head_dim**-0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def get_qkv(self, x):
        B, N, C = x.shape
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        return qkv[0], qkv[1], qkv[2]

    def forward(self, x, prefix=None):
        B, N, C = x.shape
        q, k, v = self.get_qkv(x)

        if prefix is not None:
            pre_k, pre_v = prefix.chunk(2, dim=0)
            pre_k = pre_k.expand(B, -1, -1, -1)
            pre_v = pre_v.expand(B, -1, -1, -1)
            k = torch.cat([pre_k, k], 2)
            v = torch.cat([pre_v, v], 2)

        attn_ = (q @ k.transpose(-2, -1)) * self.scale
        attn = attn_.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x, attn_


class Block(nn.Module):
    def __init__(
        self,
        dim,
        num_heads,
        mlp_ratio=4.0,
        qkv_bias=False,
        qk_scale=None,
        drop=0.0,
        attn_drop=0.0,
        drop_path=0.0,
        act_layer=nn.GELU,
        norm_layer=nn.LayerNorm,
    ):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop
        )
        self.drop_path = DropPath(drop_path) if drop_path > 0.0 else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x, n_way, prefix=None, return_attention=False):
        y = self.norm1(x)
        y, attn = self.attn(y, prefix=prefix)
        if return_attention:
            return attn
        x = x + self.drop_path(y)
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x, None


class PatchEmbed(nn.Module):
    """Image to Patch Embedding"""

    def __init__(self, img_size=224, patch_size=16, in_chans=3, embed_dim=768):
        super().__init__()
        num_patches = (img_size // patch_size) * (img_size // patch_size)
        self.img_size = img_size
        self.patch_size = patch_size
        self.num_patches = num_patches

        self.proj = nn.Conv2d(in_chans, embed_dim, kernel_size=patch_size, stride=patch_size)

    def forward(self, x):
        B, C, H, W = x.shape
        x = self.proj(x).flatten(2).transpose(1, 2)
        return x


class VisionTransformer(nn.Module):
    """Vision Transformer"""

    def __init__(
        self,
        img_size=[224],
        patch_size=16,
        in_chans=3,
        num_classes=0,
        embed_dim=768,
        depth=12,
        num_heads=12,
        mlp_ratio=4.0,
        qkv_bias=False,
        qk_scale=None,
        drop_rate=0.0,
        attn_drop_rate=0.0,
        drop_path_rate=0.0,
        norm_layer=nn.LayerNorm,
        global_pool=False,
        state_dict=None,
        **kwargs,
    ):
        super().__init__()
        self.num_features = self.embed_dim = embed_dim
        self.global_pool = global_pool
        self.depth = depth

        self.patch_embed = PatchEmbed(
            img_size=img_size[0], patch_size=patch_size, in_chans=in_chans, embed_dim=embed_dim
        )
        num_patches = self.patch_embed.num_patches

        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
        self.pos_embed = nn.Parameter(torch.zeros(1, num_patches + 1, embed_dim))
        self.pos_drop = nn.Dropout(p=drop_rate)

        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]  # stochastic depth decay rule
        self.blocks = nn.ModuleList(
            [
                Block(
                    dim=embed_dim,
                    num_heads=num_heads,
                    mlp_ratio=mlp_ratio,
                    qkv_bias=qkv_bias,
                    qk_scale=qk_scale,
                    drop=drop_rate,
                    attn_drop=attn_drop_rate,
                    drop_path=dpr[i],
                    norm_layer=norm_layer,
                )
                for i in range(depth)
            ]
        )

        self.norm = norm_layer(embed_dim)

        # Classifier head
        self.head = nn.Linear(embed_dim, num_classes) if num_classes > 0 else nn.Identity()

        trunc_normal_(self.pos_embed, std=0.02)
        trunc_normal_(self.cls_token, std=0.02)
        self.apply(self._init_weights)

        if self.global_pool:
            self.fc_norm = norm_layer(self.embed_dim)
            del self.norm  # remove the original norm

        if state_dict is not None:
            self.load_state_dict(state_dict, strict=True)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=0.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def reset_prefix(self):
        if hasattr(self, "prefix"):
            del self.prefix

    def add_prefix(self, num_prefix, init_value=None):
        self.reset_prefix()
        if init_value is not None:
            weight_k = init_value.to(self.head.weight.device)
        else:
            weight_k = torch.zeros(self.depth - 1, num_prefix, self.embed_dim).to(self.head.weight.device)
        weight_v = torch.zeros(self.depth - 1, num_prefix, self.embed_dim).to(self.head.weight.device)
        weight = nn.Parameter(torch.stack([weight_k, weight_v], 1))
        self.register_parameter("prefix", weight)

    def interpolate_pos_encoding(self, x, w, h):
        npatch = x.shape[1] - 1
        N = self.pos_embed.shape[1] - 1
        if npatch == N and w == h:
            return self.pos_embed
        class_pos_embed = self.pos_embed[:, 0]
        patch_pos_embed = self.pos_embed[:, 1:]
        dim = x.shape[-1]
        w0 = w // self.patch_embed.patch_size
        h0 = h // self.patch_embed.patch_size
        # we add a small number to avoid floating point error in the interpolation
        # see discussion at https://github.com/facebookresearch/dino/issues/8
        w0, h0 = w0 + 0.1, h0 + 0.1
        patch_pos_embed = nn.functional.interpolate(
            patch_pos_embed.reshape(1, int(math.sqrt(N)), int(math.sqrt(N)), dim).permute(0, 3, 1, 2),
            scale_factor=(w0 / math.sqrt(N), h0 / math.sqrt(N)),
            mode="bicubic",
        )
        assert int(w0) == patch_pos_embed.shape[-2] and int(h0) == patch_pos_embed.shape[-1]
        patch_pos_embed = patch_pos_embed.permute(0, 2, 3, 1).view(1, -1, dim)
        return torch.cat((class_pos_embed.unsqueeze(0), patch_pos_embed), dim=1)

    def prepare_tokens(self, x):
        B, nc, w, h = x.shape
        x = self.patch_embed(x)  # patch linear embedding

        # add the [CLS] token to the embed patch tokens
        cls_tokens = self.cls_token.expand(B, -1, -1)
        x = torch.cat((cls_tokens, x), dim=1)

        # add positional encoding to each token
        x = x + self.interpolate_pos_encoding(x, w, h)

        return self.pos_drop(x)

    def forward(self, x, n_way, prefix=None, return_feat=False):
        x = self.prepare_tokens(x)
        for i, blk in enumerate(self.blocks):
            total_loss = 0.0
            # if hasattr(self, 'prefix') and i > 0:
            if prefix is not None:
                x, loss = blk(x, n_way, prefix=prefix)
                if loss is not None:
                    total_loss += loss
            else:
                x, _ = blk(x, n_way)

        if self.global_pool:
            feat = x[:, 1:].mean(1)
            feat = self.fc_norm(feat)
        else:
            x = self.norm(x)
            feat = x[:, 0]
        if return_feat:
            return feat
        return self.head(feat), total_loss

    def embed(self, x):
        return self.forward(x, return_feat=True)

    def get_last_selfattention(self, x):
        x = self.prepare_tokens(x)
        for i, blk in enumerate(self.blocks):
            if i < len(self.blocks) - 1:
                x, _ = blk(x)
            else:
                # return attention of the last block
                return blk(x, return_attention=True)

    def get_intermediate_layers(self, x, n=1):
        x = self.prepare_tokens(x)
        # we return the output tokens from the `n` last blocks
        output = []
        for i, blk in enumerate(self.blocks):
            x, _ = blk(x)
            if len(self.blocks) - i <= n:
                output.append(self.norm(x))
        return output

    def get_all_cls_token(self, x):
        x = self.prepare_tokens(x)
        # we return the output tokens from the `n` last blocks
        output = []
        for i, blk in enumerate(self.blocks):
            x, _ = blk(x)
            output.append(self.norm(x)[:, 0])
        return output

    def get_patch_embed(self, x, n_way):
        x = self.prepare_tokens(x)
        patch_embed = x.clone()[:, 1:]
        for i, blk in enumerate(self.blocks):
            if isinstance(blk, Block):
                blkfunc = blk
            if isinstance(blk, Block_Ada):
                blkfunc = blk.op
            if i < len(self.blocks) - 1:
                x, _ = blkfunc(x, n_way)
            else:
                # return attention of the last block
                attn = blkfunc(x, n_way, return_attention=True)

        attn = F.softmax(attn[:, :, 0, 1:], dim=-1).unsqueeze(-1)  # (batch_size, num_head, num_patch, 1)
        patch_embed = (patch_embed.unsqueeze(1) * attn).sum(2).mean(1)
        return patch_embed


class ProtoVisionTransformer(VisionTransformer):
    def __init__(
        self,
        img_size=[224],
        patch_size=16,
        in_chans=3,
        num_classes=0,
        embed_dim=768,
        depth=12,
        num_heads=12,
        mlp_ratio=4.0,
        qkv_bias=False,
        qk_scale=None,
        drop_rate=0.0,
        attn_drop_rate=0.0,
        drop_path_rate=0.0,
        norm_layer=nn.LayerNorm,
        global_pool=False,
        state_dict=None,
        **kwargs,
    ):
        super().__init__(
            img_size=img_size,
            patch_size=patch_size,
            in_chans=in_chans,
            num_classes=num_classes,
            embed_dim=embed_dim,
            depth=depth,
            num_heads=num_heads,
            mlp_ratio=mlp_ratio,
            qkv_bias=qkv_bias,
            qk_scale=qk_scale,
            drop_rate=drop_rate,
            attn_drop_rate=attn_drop_rate,
            drop_path_rate=drop_path_rate,
            norm_layer=norm_layer,
            global_pool=global_pool,
            state_dict=state_dict,
            **kwargs,
        )
        self.pn_head = ProtoNetHead()

    def forward(self, support_data, support_targets, query_data, query_targets):
        support_embeddings, _ = super().forward(support_data)
        query_embeddings, _ = super().forward(query_data)
        return self.pn_head(support_embeddings, support_targets, query_embeddings, query_targets), None


def _vit(state_dict, patch_size=16, **kwargs):
    model = ProtoVisionTransformer(
        patch_size=patch_size,
        embed_dim=384,
        depth=12,
        num_heads=6,
        mlp_ratio=4,
        qkv_bias=True,
        norm_layer=partial(nn.LayerNorm, eps=1e-6),
        state_dict=state_dict,
        **kwargs,
    )
    return model


def vit_small(initialization, setting, **kwargs):
    init_state_dict = torch.load(f"./models/{initialization}/vit_small.pth")
    model = _vit(init_state_dict, patch_size=16, num_classes=0, **kwargs)
    return model


class ETT_VisionTransformer(VisionTransformer):
    def __init__(
        self,
        img_size=[224],
        patch_size=16,
        in_chans=3,
        num_classes=0,
        embed_dim=768,
        depth=12,
        num_heads=12,
        mlp_ratio=4.0,
        qkv_bias=False,
        qk_scale=None,
        drop_rate=0.0,
        attn_drop_rate=0.0,
        drop_path_rate=0.0,
        norm_layer=nn.LayerNorm,
        global_pool=False,
        state_dict=None,
        **kwargs,
    ):
        super().__init__(
            img_size=img_size,
            patch_size=patch_size,
            in_chans=in_chans,
            num_classes=num_classes,
            embed_dim=embed_dim,
            depth=depth,
            num_heads=num_heads,
            mlp_ratio=mlp_ratio,
            qkv_bias=qkv_bias,
            qk_scale=qk_scale,
            drop_rate=drop_rate,
            attn_drop_rate=attn_drop_rate,
            drop_path_rate=drop_path_rate,
            norm_layer=norm_layer,
            global_pool=global_pool,
            state_dict=state_dict,
            **kwargs,
        )
        _blocks = nn.ModuleList([Block_Ada(block, dim=embed_dim, num_heads=num_heads) for block in self.blocks])
        self.blocks = _blocks

    def forward(self, x, n_way, prefix=None, return_feat=False):
        return super().forward(x, n_way, prefix=prefix, return_feat=return_feat)


class ETT_ProtoVisionTransformer(ETT_VisionTransformer):
    def __init__(
        self,
        img_size=[224],
        patch_size=16,
        in_chans=3,
        num_classes=0,
        embed_dim=768,
        depth=12,
        num_heads=12,
        mlp_ratio=4.0,
        qkv_bias=False,
        qk_scale=None,
        drop_rate=0.0,
        attn_drop_rate=0.0,
        drop_path_rate=0.0,
        norm_layer=nn.LayerNorm,
        global_pool=False,
        state_dict=None,
        **kwargs,
    ):
        super().__init__(
            img_size=img_size,
            patch_size=patch_size,
            in_chans=in_chans,
            num_classes=num_classes,
            embed_dim=embed_dim,
            depth=depth,
            num_heads=num_heads,
            mlp_ratio=mlp_ratio,
            qkv_bias=qkv_bias,
            qk_scale=qk_scale,
            drop_rate=drop_rate,
            attn_drop_rate=attn_drop_rate,
            drop_path_rate=drop_path_rate,
            norm_layer=norm_layer,
            global_pool=global_pool,
            state_dict=state_dict,
            **kwargs,
        )
        self.pn_head = ProtoNetHead()

    def forward(self, support_data, support_targets, query_data, query_targets, n_way, prefix=None, return_feat=False):
        support_embeddings, distillation_loss = super().forward(
            support_data, n_way, prefix=prefix, return_feat=return_feat
        )
        query_embeddings, _ = super().forward(query_data, n_way, prefix=prefix, return_feat=return_feat)
        return self.pn_head(support_embeddings, support_targets, query_embeddings, query_targets), distillation_loss


def _ett_vit(state_dict, patch_size=16, **kwargs):
    model = ETT_ProtoVisionTransformer(
        patch_size=patch_size,
        embed_dim=384,
        depth=12,
        num_heads=6,
        mlp_ratio=4.0,
        qkv_bias=True,
        norm_layer=partial(nn.LayerNorm, eps=1e-6),
        state_dict=state_dict,
        **kwargs,
    )
    num_decisions = len([n for n, m in model.named_modules() if isinstance(m, Block_Ada)]) * 2
    model = ViTSuperNetSampler(model, num_decisions)
    return model


def ett_vit_small(initialization, setting, **kwargs):
    setting_state_dict_path = f"./models/nfts/ett_vit_small_{setting}.pth"
    if os.path.exists(setting_state_dict_path) and os.path.isfile(setting_state_dict_path):
        setting_state_dict = torch.load(setting_state_dict_path)
        model = _ett_vit(None, patch_size=16, num_classes=0, **kwargs)
        model.load_state_dict(setting_state_dict, strict=True)
    else:
        init_state_dict = torch.load(f"./models/{initialization}/vit_small.pth")
        model = _ett_vit(init_state_dict, patch_size=16, num_classes=0, **kwargs)
    return model
